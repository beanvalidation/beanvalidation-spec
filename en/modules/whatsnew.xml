<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../docbook-support/support/docbook-dtd/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../global.ent">
%BOOK_ENTITIES;
]>
<chapter id="whatsnew" revisionflag="added">
  <title>What's new in 1.1</title>

  <para>Bean Validation 1.1 improves and build upon Bean Validation 1.0. The
  expert group and the community have been working on a few specific
  areas.</para>

  <section>
    <title>Openness</title>

    <para>All of Bean Validation 1.1 work has been done in the open and in an
    open source way. Source code for the API, reference implementation, test
    compatibility kit as well as the specification and the website sources are
    available in the open. All discussions are done in the open in the
    publicly available development mailing list. Road map and proposals are
    also published on the website.</para>

    <para>You can find all the details (mailing lists, source repositories
    etc.) at <ulink
    url="http://beanvalidation.org">http://beanvalidation.org</ulink>.</para>
  </section>

  <section>
    <title>Dependency injection</title>

    <para>Bean Validation uses a few components
    <classname>MessageInterpolator</classname>,
    <classname>TraversableResolver</classname>,
    <classname>ParameterNameProvider</classname>,
    <classname>ConstraintValidatorFactory</classname> and
    <classname>ConstraintValidator</classname>. We aim at standardising how
    these objects are managed by a container and how these objects can benefit
    from container services. In particular, CDI support within Java EE is
    being defined.</para>
  </section>

  <section>
    <title>Method validation</title>

    <para>Bean Validation 1.1 allows to put constraints to the parameters and
    return values of arbitrary methods and constructors. That way the Bean
    Validation API can be used to describe and validate the contract applying
    to a given method or constructor, that is:</para>

    <itemizedlist>
      <listitem>
        <para>the preconditions that must be met by the caller before the
        method or constructor may be invoked and</para>
      </listitem>

      <listitem>
        <para>the postconditions that are guaranteed to the caller after a
        method or constructor invocation returns.</para>
      </listitem>
    </itemizedlist>

    <para>This enables a programming style known as "Programming by Contract"
    (PbC). Compared to traditional means of checking the sanity of argument
    and return values this approach has several advantages:</para>

    <itemizedlist>
      <listitem>
        <para>These checks are expressed declaratively and don't have to be
        performed manually, which results in less code to write, read and
        maintain.</para>
      </listitem>

      <listitem>
        <para>The pre- and postconditions applying for a method or constructor
        don't have to be expressed again in the documentation, since any of
        its annotations will automatically be included in the generated
        JavaDoc. This reduces redundancies, thus avoiding efforts and
        inconsistencies between implementation and documentation.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Integration with Context and Dependency Injection</title>

    <para>The integration points with Context and Dependency Injection (CDI)
    have been increased and reworked. This should open up for a more natural
    and standard integration both in Java EE and Java SE and encompass
    dependency injection, component lifecycle management and interception for
    method validation.</para>
  </section>

  <section>
    <title>Group conversion</title>

    <para>The specification offers a way to alter the targeted group when
    validation cascading in happening. This feature is particularly useful to
    reuse a given object (graph) and to avoid leaking groups between various
    object subgraphs. It also makes for more readable constraints.</para>
  </section>

  <section>
    <title>Message interpolation via the unified expression language</title>

    <para>Constraint violation messages can now use EL expressions for a much
    more flexible rendering and string formatting. In particular a formatter
    object is injected in the EL context to convert numbers dates etc. into
    the locale specific string representation. Likewise, the validated value
    is also available in the EL context.</para>
  </section>

  <section>
    <title>Others</title>

    <para>Many more minor changes are being done. Check out the change log for
    more details at <xref linkend="changelog"/>.</para>
  </section>
</chapter>
