<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../docbook-support/support/docbook-dtd/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../global.ent">
%BOOK_ENTITIES;
]>
<chapter id="integration" revisionflag="added">
  <title>Integration</title>

  <para revisionflag="added">In this chapter, integration points between Bean
  Validation and other technologies are discussed. We first address the
  integration in generic terms applying to all integrations and we then detail
  how integration with various Java EE specifications is handled more
  specifically.</para>

  <section id="integration-general">
    <title>General requirements</title>

    <para>This section covers general requirements that should be followed by
    any container and interception technology integrating Bean
    Validation.</para>

    <section>
      <title>Objects lifecycle</title>

      <para revisionflag="added">Generally speaking, containers and frameworks
      controlling the life cycle of objects (such as Java EE, dependency
      injection frameworks or component frameworks) should:</para>

      <itemizedlist revisionflag="added">
        <listitem>
          <para>build and bootstrap the
          <classname>ValidatorFactory</classname> instance for an
          application.</para>
        </listitem>

        <listitem>
          <para>provide access to the <classname>ValidatorFactory</classname>
          instance as well as <classname>Validator</classname> instances in
          their default configuration using the paradigm of the container: for
          example, such instances would be injectable in other objects via a
          dependency injection framework.</para>
        </listitem>

        <listitem>
          <para>configure <classname>ValidatorFactory</classname> with a
          custom <classname>ConstraintValidatorFactory</classname> instance
          that returns managed <classname>ConstraintValidator</classname>
          instances, unless a custom
          <classname>ConstraintValidatorFactory</classname> is requested by
          the user. The scope of <classname>ConstraintValidator</classname>
          instances is still fully controlled by the Bean Validation provider
          as described in <xref
          linkend="constraintsdefinitionimplementation-constraintfactory"/>,
          but as managed beans they can receive expected services like
          injection of other objects.</para>
        </listitem>

        <listitem>
          <para>configure <classname>ValidatorFactory</classname> with managed
          instances of <classname>ConstraintValidatorFactory</classname>,
          <classname>MessageInterpolator</classname>,
          <classname>ParameterNameProvider</classname> and
          <classname>TraversableResolver</classname>, if such instances are
          defined in the XML deployment descriptor. Services provided by the
          container (like dependency injection) should thus be available to
          these instances.</para>
        </listitem>

        <listitem>
          <para>invoke <methodname>ValidatorFactory.close()</methodname> when
          the <classname>ValidatorFactory</classname> instance is no longer
          needed.</para>
        </listitem>

        <listitem>
          <para>dispose of managed instances provided to the Bean Validation
          bootstrap process after
          <methodname>ValidatorFactory.close()</methodname> has been
          invoked.</para>
        </listitem>
      </itemizedlist>

      <important>
        <para>In this context, a default
        <classname>ValidatorFactory</classname> is a factory configured like
        the factory returned by
        <classname>Validation.buildDefaultValidatorFactory</classname> (see
        also <xref linkend="boostrapping-validation"/>) except for the
        enhancements described above. A default
        <classname>Validator</classname> instance is a
        <classname>Validator</classname> instance retrieved via
        <methodname>getValidator()</methodname> from the default
        <classname>ValidatorFactory</classname>.</para>
      </important>

      <para revisionflag="added">A user is free to explicitly use the
      bootstrap API to customize the <classname>ValidatorFactory</classname>
      as needed.</para>
    </section>

    <section id="integration-general-executable" revisionflag="added">
      <title>Method and constructor validation</title>

      <para revisionflag="added">This section expresses the behavior that
      integration with interception frameworks should follow. Any deviation
      should be considered with care as it will surprise Bean Validation
      users.</para>

      <para revisionflag="added">Method interception frameworks (such as AOP
      or interceptor frameworks) enable interception of constrained methods
      following the steps defined in <xref
      linkend="validationapi-triggeringmethodvalidation"/>. Method validation
      execution is implicit for any method or constructor annotated with
      constraints.</para>

      <para><phrase role="tck-testable">By default, method validation is
      applied to all constrained methods or constructors provided the
      integration technology can intercept the call. By default, getters (as
      defined in <xref
      linkend="constraintdeclarationvalidationprocess-requirements"/>) are not
      considered constrained methods.</phrase> <phrase
      role="tck-not-testable">Static methods are ignored by validation.
      Putting constraints on a static method is not portable.</phrase></para>

      <para>Bean Validation - via the interception technology - offers a way
      to customize whether or not a constructor, method or getter is validated
      when executed. This is achieved:</para>

      <itemizedlist>
        <listitem>
          <para>via the <classname>@ValidateExecutable</classname> annotation
          (see <xref linkend="example-validateexecutable"/>)</para>
        </listitem>

        <listitem>
          <para>via a global configuration defined in
          <filename>validation.xml</filename>:
          <literal>validated-executables</literal>. See <xref
          linkend="xml-config"/> for more details.</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>Integration layers can read the list of validated executable
        types defined in the global configuration via the
        <classname>Configuration</classname> object:
        <code>configuration.getBootstrapConfiguration().getValidatedExecutableTypes()</code>.
        This list is extracted from
        <filename>validation.xml</filename>.</para>
      </note>

      <para>More formally, a given executable (constructor or method) is
      validated upon execution:</para>

      <itemizedlist>
        <listitem>
          <para role="tck-testable">if it is annotated with
          <classname>@ValidateExecutable</classname> and the
          <methodname>value</methodname> attribute contains the executable
          type. If the <methodname>value</methodname> attribute does not
          contain the executable type, the executable is not validated.</para>
        </listitem>

        <listitem>
          <para role="tck-testable">otherwise if the type (class, interface)
          on which the executable is defined is annotated with
          <classname>@ValidateExecutable</classname> and the
          <methodname>value</methodname> attribute contains the executable
          type. If the <methodname>value</methodname> attribute does not
          contain the executable type, the executable is not validated.</para>
        </listitem>

        <listitem>
          <para role="tck-testable">otherwise if the global configuration of
          validated executables contains the executable type. If the global
          setting does not contain the executable type, the executable is not
          validated.</para>
        </listitem>

        <listitem>
          <para role="tck-testable">The rules above do not apply to methods
          overriding a superclass method or implementing an interface method.
          In this case, the method inherits the behavior of the method it
          overrides / implements.</para>
        </listitem>
      </itemizedlist>

      <note>
        <para>The last rule is present to enforce the Liskov substitution
        principle (more info at <xref
        linkend="constraintdeclarationvalidationprocess-methodlevelconstraints-inheritance"/>).
        In addition providers may implement alternative, potentially more
        liberal, approaches for handling configuration in inheritance
        hierarchies. Possible means for activating such alternative behavior
        include provider-specific configuration properties or annotations.
        Note that client code relying on such alternative behavior may not be
        portable between Bean Validation providers.</para>
      </note>

      <para>The following executable types are available:</para>

      <itemizedlist>
        <listitem>
          <para><literal>NONE</literal>: parameters and return values are not
          validated upon execution. This option is equivalent to an empty list
          of executable types and is present to improve readability. A list
          containing <literal>NONE</literal> and other types of executables is
          equivalent to a list containing the types of executables without
          <literal>NONE</literal>.</para>
        </listitem>

        <listitem>
          <para role="tck-testable"><literal>CONSTRUCTORS</literal>:
          parameters and return values are validated provided the executable
          is a constructor.</para>
        </listitem>

        <listitem>
          <para role="tck-testable"><literal>NON_GETTER_METHODS</literal>:
          parameters and return values are validated provided the executable
          is a method but not a getter.</para>
        </listitem>

        <listitem>
          <para role="tck-testable"><literal>GETTER_METHODS</literal>:
          parameters and return values are validated provided the executable
          is a getter method.</para>
        </listitem>

        <listitem>
          <para role="tck-testable"><literal>ALL</literal>: parameters and
          return values are validated for all executables (getters, non
          getters and constructors). This option is equivalent to a list of
          all executable types and is present to improve readability. A list
          containing <literal>ALL</literal> and other types of executables is
          equivalent to a list containing only <literal>ALL</literal>.</para>
        </listitem>
      </itemizedlist>

      <example id="example-validateexecutable" lang="JAVA" role="JAVA">
        <title>@ValidateExecutable annotation</title>

        <programlisting>package javax.validation.executable;

/**
 * Expresses which executables (method or constructor) should have their parameters
 * and return value validated upon execution.
 * &lt;p/&gt;
 * The settings for a given executable is resolved as followed.
 * A given executable is validated upon execution:
 * &lt;ul&gt;
 *     &lt;li&gt;if it is annotated with {@code @ValidateExecutable} and the {@code value} attribute
 *     contains the executable type. If the {@code value} attribute does not contain the
 *     executable type, the executable is not validated.&lt;/li&gt;
 *     &lt;li&gt;otherwise if,
 *     the type (class, interface) on which the executable is defined
 *     is annotated with {@code @ValidateExecutable} and the {@code value} attribute
 *     contains the executable type. If the {@code value} attribute does not contain the
 *     executable type, the executable is not validated.&lt;/li&gt;
 *     &lt;li&gt;otherwise if the global executable validation setting contains the executable
 *     type. If the global setting does not contain the executable type, the executable
 *     is not validated.&lt;/li&gt;
 *     &lt;li&gt;The rules above do not apply to methods overriding a superclass method or
 *     implementing an interface method. In this case, the method inherits the behavior
 *     of the method it overrides / implements.&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * @author Emmanuel Bernard
 * @since 1.1
 */
@Target({ CONSTRUCTOR, METHOD, TYPE, PACKAGE })
@Retention(RUNTIME)
public @interface ValidateExecutable {

    /**
     * List of executable types to be validated when called.
     * Defaults to validating all types.
     */
    ExecutableType[] value() default {ExecutableType.ALL};
}</programlisting>

        <programlisting>package javax.validation.executable;

/**
 * Defines the types of executables targeted by an operation.
 *
 * @author Emmanuel Bernard
 * @since 1.1
 */
public enum ExecutableType {

    /**
     * None of the executables.
     * &lt;p/&gt;
     * Note that this option is equivalent to an empty list of executable types
     * and is present to improve readability. If {@code NONE} and other types of executables
     * are present in a list, {@code NONE} is ignored.
     */
    NONE,

    /**
     * All constructors.
     */
    CONSTRUCTORS,

    /**
     * All methods except the ones following the getter pattern. A getter according to the
     * JavaBeans specification is a method whose:
     * &lt;ul&gt;
     *     &lt;li&gt;name starts with get, has a return type but no parameter&lt;/li&gt;
     *     &lt;li&gt;name starts with is, has a return type and is returning {@code Boolean}.&lt;/li&gt;
     * &lt;/ul&gt;
     */
    NON_GETTER_METHODS,

    /**
    /**
     * All methods following the getter pattern. A getter according to the
     * JavaBeans specification is a method whose:
     * &lt;ul&gt;
     *     &lt;li&gt;name starts with get, has a return type but no parameter&lt;/li&gt;
     *     &lt;li&gt;name starts with is, has a return type and is returning {@code Boolean}.&lt;/li&gt;
     * &lt;/ul&gt;
     */
    GETTER_METHODS,

    /**
     * All executables (constructors and methods).
     */
    ALL
}</programlisting>
      </example>

      <note>
        <para>The proper selection of the validated executables is the
        responsibility of the integration between the interception technology
        and Bean Validation. Bean Validation engines ignore the
        <literal>validated-executables</literal> and
        <classname>@ValidatedExecutable</classname> when validating
        executables and when providing metadata.</para>
      </note>

      <section>
        <title>Examples</title>

        <para>The following example shows some of the way you can refine
        executable validation with
        <classname>@ValidateExecutable</classname>.</para>

        <example>
          <title>Method validation configurations</title>

          <programlisting language="JAVA" role="JAVA">public class OrderService {

    boolean isValidCustomer(@NotNull String customerCode) { [...] }

    @ValidateExecutable
    @Min(0)
    Integer getBacklog() { [...] }

    @ValidateExecutable(NONE)
    Order placeOrder(@NotNull String customerCode, @Valid Item item, int quantity) { [...] }

}

@ValidateExecutable({GETTER_METHODS, NON_GETTER_METHODS})
public class SimpleOrderService extends OrderService {

    public SimpleOrderService(@NotNull ServiceProvider provider) { [...] }

    @Overrides
    Order placeOrder(String customerCode, Item item, int quantity) { [...] }

}

public class ComplexOrderService extends SimpleOrderService {
    public ComplexOrderService(@NotNull ServiceProvider provider) { [...] }
}</programlisting>
        </example>

        <para>All constructors and non-getter methods of
        <classname>OrderService</classname> are validated upon execution as
        this is the default setting.
        <methodname>isValidCustomer()</methodname> is validated as this method
        is not a getter (it has a parameter).
        <methodname>getBacklog()</methodname> is a getter but is validated
        thanks to <classname>@ValidateExecutable</classname> defaulting to
        <literal>ALL</literal>. <methodname>placeOrder</methodname> is not
        validated as <classname>@ValidateExecutable</classname> is set to
        <literal>NONE</literal>.</para>

        <para>All getter and non-getter methods of
        <classname>SimpleOrderService</classname> are validated upon execution
        by default due to the presence of
        <classname>@ValidateExecutable</classname> on the class. The
        <classname>SimpleOrderService</classname> constructor is thus not
        validated. <classname>SimpleOrderService.placeOrder</classname> is not
        validated either because it overrides
        <classname>OrderService.placeOrder()</classname> and thus inherits its
        settings.</para>

        <para>All constructors and non-getter methods of
        <classname>ComplexOrderService</classname> are validated upon
        execution as this is the default settings - the type level settings of
        <classname>SimpleOrderService</classname> are not inherited. This
        means that the <classname>ComplexOrderService</classname> constructor
        is validated.</para>
      </section>
    </section>
  </section>

  <section id="integration-javaee" revisionflag="added">
    <title>Java EE</title>

    <para>Java EE must obey the rules defined above and make the following
    instances available under JNDI:</para>

    <para><itemizedlist>
        <listitem>
          <para><classname>ValidatorFactory</classname> under
          <constant>java:comp/ValidatorFactory</constant></para>
        </listitem>

        <listitem>
          <para><classname>Validator</classname> under
          <constant>java:comp/Validator</constant></para>
        </listitem>
      </itemizedlist></para>

    <para>Instead of looking the instances up via JNDI, the user can request
    them to be injected via the <classname>Resource</classname>
    annotation:<programlisting>@Resource ValidatorFactory validatorFactory;
@Resource Validator validator;</programlisting></para>
  </section>

  <section revisionflag="added">
    <title id="integration-cdi">Context and Dependency Injection (CDI)
    integration</title>

    <para>There are several integrations points between Bean Validation and
    CDI. If a Bean Validation provider integrates with CDI, it must follow the
    rules laid out in this section. In a Java EE container, a Bean Validation
    provider must integrate with CDI.</para>

    <section>
      <title><classname>ValidatorFactory</classname> and
      <classname>Validator</classname></title>

      <para role="tck-testable">Similar to the Java EE integration via
      <classname>@Resource</classname> (see <xref
      linkend="integration-javaee"/>), a CDI container must support injection
      of built-in default <classname>ValidatorFactory</classname> and
      <classname>Validator</classname> beans via
      <classname>@Inject</classname>. These default beans are injectable via
      the <classname>@Default</classname> qualifier.</para>

      <programlisting>@Inject ValidatorFactory;
@Inject Validator;</programlisting>

      <para>Optionally, the CDI container can support injection of provider
      specific - as defined by <code>Validation.byProvider()</code> -
      <classname>ValidatorFactory</classname> and
      <classname>Validator</classname> beans via
      <classname>@Inject</classname>. These beans must be registered with a
      custom qualifier, for example <classname>@ACME</classname>. Using the
      product name or brand for the qualifier is considered good
      practice.</para>

      <programlisting>@Inject @ACME ValidatorFactory;
@Inject @ACME Validator;</programlisting>

      <note>
        <title>Discussion on possible implementations</title>

        <para>Registration of the built-in default beans and the provider
        specific beans may be achieved using the CDI portable extension SPI or
        a vendor specific SPI.</para>
      </note>
    </section>

    <section>
      <title><classname>ConstraintValidatorFactory</classname>,
      <classname>MessageInterpolator</classname>,
      <classname>ParameterNameProvider</classname> and
      <classname>TraversableResolver</classname></title>

      <para>If a custom <classname>ConstraintValidatorFactory</classname>,
      <classname>MessageInterpolator</classname>,
      <classname>ParameterNameProvider</classname> or
      <classname>TraversableResolver</classname> class is defined in the XML
      deployment descriptor (see <xref linkend="xml-config"/>), the
      <classname>ValidatorFactory</classname> must be configured with CDI
      managed beans representing the requested classes. Services like
      dependency injection, interception and decoration must thus be made
      available to these instances by the container.</para>

      <para>If no custom <classname>ConstraintValidatorFactory</classname> is
      requested by the user, the <classname>ValidatorFactory</classname> must
      be configured with a custom
      <classname>ConstraintValidatorFactory</classname> instance that returns
      CDI managed beans representing the requested
      <classname>ConstraintValidator</classname> types. The
      factory<itemizedlist>
          <listitem>
            <para>creates non-contextual
            <classname>ConstraintValidator</classname> instances for each
            <methodname>ConstraintValidatorFactory.getInstance()</methodname>
            call. To inject dependencies into the
            <classname>ConstraintValidator</classname> instance, the CDI
            <classname>InjectionTarget</classname> API should be used. Before
            returning the instance the following calls should be made:
            <classname>InjectionTarget.produce()</classname>,
            <classname>InjectionTarget.inject()</classname> and
            <classname>InjectionTarget.postConstruct()</classname>.</para>
          </listitem>

          <listitem>
            <para>calls <classname>InjectionTarget.preDestroy()</classname>
            and <classname>InjectionTarget.dispose()</classname> upon
            <classname>ConstraintValidatorFactory.releaseInstance</classname>
            (see also <xref
            linkend="constraintsdefinitionimplementation-constraintfactory"/>
            for more information about the life cycle of a
            <classname>ConstraintValidator</classname>).</para>
          </listitem>
        </itemizedlist></para>

      <para revisionflag="added" role="tck-not-testable">Using directly or
      indirectly a JPA <classname>EntityManager</classname> that might call
      back Bean Validation for validation is not allowed in the Bean
      Validation extension points and in
      <classname>ConstraintValidator</classname> instances. This would lead to
      infinite flush or unexpected behavior.</para>
    </section>

    <section>
      <title>Method and constructor validation</title>

      <para role="tck-testable">Bean Validation requires that CDI beans
      support constructor and method validation as defined in <xref
      linkend="integration-general-executable"/>. Validation must happen at
      the equivalent time an interceptor occurs when having priority
      <code>Interceptor.Priority.PLATFORM_AFTER+800</code>, in other words
      priority of <literal>4800</literal>.</para>

      <note>
        <title>Discussion on possible implementations</title>

        <para>The CDI interceptor binding facility does not directly support
        this, but the effect may be achieved using the CDI portable extension
        SPI, or vendor specific SPIs. For example, an interceptor with the
        expected priority can be programmatically bound to the constructors
        and methods expected to be validated according to the rules at <xref
        linkend="integration-general-executable"/>.</para>

        <para>It is recommended to only intercept methods and constructors
        that are both constrained and validated according to the rules defined
        at <xref linkend="integration-general-executable"/>. <xref
        linkend="validationapi-triggeringmethodvalidation"/> gives examples
        how the metadata API can be used to determine whether or not a method
        is constrained (regardless of the filtering rules of
        <classname>@ValidateExecutable</classname>).</para>
      </note>
    </section>
  </section>

  <section revisionflag="added">
    <title id="integration-jpa">Java Persistence 2.0 integration</title>

    <para>Integration with Java Persistence is described in the Java
    Persistence 2 specification (<ulink
    url="http://jcp.org/en/jsr/detail?id=317">JSR-317</ulink> and later <ulink
    url="http://jcp.org/en/jsr/detail?id=338">JSR-338</ulink>). Persistence
    frameworks are encouraged to mimic the integration work done with Java
    Persistence.</para>
  </section>

  <section revisionflag="added">
    <title id="integration-jsf">Java Server Faces 2.0 integration</title>

    <para>Integration with Java Server Faces is described in the Java Server
    Faces 2 specification (<ulink
    url="http://jcp.org/en/jsr/detail?id=314">JSR-314</ulink> and later <ulink
    url="http://jcp.org/en/jsr/detail?id=338">JSR-344</ulink>). Presentation
    frameworks are encouraged to study the integration work done with JSF
    2.</para>
  </section>

  <section revisionflag="added">
    <title id="integration-jsf">JAX-RS 2 integration</title>

    <para>Integration with JAX-RS is described in the JAX-RS 2 specification
    (<ulink url="http://jcp.org/en/jsr/detail?id=339">JSR-339</ulink>).</para>
  </section>
</chapter>
