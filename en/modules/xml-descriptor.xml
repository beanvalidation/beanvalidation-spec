<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../docbook-support/support/docbook-dtd/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../global.ent">
%BOOK_ENTITIES;
]>
<chapter id="xml">
  <title>XML deployment descriptor</title>

  <para>Two kind<phrase revisionflag="added">s</phrase> of XML descriptors are
  used by Bean Validation. The first one describes the Bean Validation
  configuration provided as <filename>META-INF/validation.xml</filename>. The
  second one describes constraints declarations and closely matches the
  annotations declaration approach. <phrase revisionflag="added"
  role="tck-testable">If an XML descriptor does not validate against the
  corresponding XSD file, a <classname>ValidationException</classname> is
  raised.</phrase></para>

  <section id="xml-mapping">
    <title>Constraint definition and declaration</title>

    <para>Bean Validation lets you declare constraints via XML rather than
    annotations. You can either ignore constraints declared via annotations or
    consider XML as adding additional constraints on top of annotation
    constraints. While it is not possible to define a new constraint via XML,
    you can redefine the list of <classname>ConstraintValidator</classname>
    classes associated to a given constraint definition.</para>

    <para>There is no distinction between an annotation based constraint
    declaration and an XML based constraint declaration: they are considered
    equivalent and should be treated as such by the Bean Validation provider.
    The rest of the specification only refers to annotations as validation
    metadata: it should be read as annotation or their XML descriptor
    equivalent.</para>

    <para><phrase role="tck-testable">Specifically when exploring metadata,
    the Bean Validation provider must ensure that an annotation instance
    corresponding to the XML declaration is provided via
    <classname>ConstraintDescriptor.getAnnnotation()</classname>.</phrase> The
    annotation elements as well as
    <methodname>ConstraintValidator.getAttributes()</methodname> must reflect
    the values described in the XML declaration (see <xref
    linkend="xml-mapping-typeconversion"/>). Likewise,
    <methodname>ConstraintDescriptor.getConstraintValidatorClasses()</methodname>
    must reflect XML based constraint definition overriding (see <xref
    linkend="xml-mapping-constraintdefinition"/>).</para>

    <para><phrase role="tck-testable">A given class must not be described more
    than once amongst all the XML mapping descriptors.</phrase> <phrase
    role="tck-testable">A given field or getter must not be described more
    than once on a given class description.</phrase> <phrase
    role="tck-testable">A given constraint definition must not be overridden
    more than once amongst all the XML mapping descriptors.</phrase> <phrase
    role="tck-testable">If any of these rule is violated in a given validation
    deployment, a <classname>ValidationException</classname> is raised during
    the creation of the
    <classname>ValidatorFactory</classname>.</phrase></para>

    <para>The schema is provided in <xref linkend="xml-mapping-xsd"/>.</para>

    <section>
      <title>Constraint declaration in XML</title>

      <para role="tck-testable">If <literal>default-package</literal> is set,
      all unqualified class names (including annotations) are considered part
      of the package described by <literal>default-package</literal>.</para>

      <para><phrase role="tck-testable">A given JavaBean is described by the
      <classname>bean</classname> element.</phrase> <phrase
      role="tck-testable">The name of the class is mandatory.</phrase> <phrase
      role="tck-testable">By default, all constraint declarations expressed
      via annotation are ignored for classes described in XML.</phrase>
      <phrase role="tck-testable">You can force Bean Validation to consider
      both annotations and XML constraint declarations by using
      <literal>ignore-annotation="false"</literal> on
      <literal>bean</literal>.</phrase></para>

      <note>
        <para>The <literal>ignore-annotation</literal> setting is not
        inherited from nor by the class hierarchy. In other words, it only
        applies to the current bean only.</para>
      </note>

      <para role="tck-testable">If the name of the class does refer to a class
      not present in in the classpath, a
      <classname>ValidationException</classname> is raised.</para>

      <example revisionflag="changed">
        <title>Example of bean XML declaration</title>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.1.xsd"
        version="1.1"&gt;

    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;

    &lt;bean class="Customer" ignore-annotations="false"&gt;
        [...]
    &lt;/bean&gt;
    &lt;bean class="com.acme.common.model.Address"&gt;
        [...]
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
      </example>

      <section>
        <title>Class-level overriding</title>

        <para>Class level annotations are described via the
        <literal>class</literal> element. <phrase role="tck-testable">If
        <literal>ignore-annotations</literal> is declared, Bean Validation
        must honor the explicit value for this element.</phrase> <phrase
        role="tck-testable">If not declared, the default value defined in the
        encapsulating <classname>bean</classname> element is
        considered.</phrase></para>

        <para><phrase role="tck-testable">When
        <literal>ignore-annotations</literal> is true, class-level Bean
        Validation annotations are ignored for this class (including the
        <classname>@GroupSequence</classname>).</phrase> When
        <literal>ignore-annotations</literal> is false:</para>

        <itemizedlist>
          <listitem>
            <para role="tck-testable">Constraints declared in XML and
            constraints declared in annotations are added and form the list of
            class-level declared constraints.</para>
          </listitem>

          <listitem>
            <para role="tck-testable"><classname>@GroupSequence</classname> is
            considered unless <literal>group-sequence</literal> element is
            explicitly used.</para>
          </listitem>
        </itemizedlist>

        <example revisionflag="changed">
          <title>Example of class-level declaration</title>

          <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.1.xsd"
        version="1.1"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;
        &lt;class ignore-annotations="true"&gt;
            [...]
        &lt;/class&gt;
    &lt;/bean&gt;
    &lt;bean class="com.acme.common.model.Address"&gt;
        &lt;class&gt;
            [...]
        &lt;/class&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
        </example>
      </section>

      <section>
        <title>Field-level overriding</title>

        <para>Field level annotations are described via the
        <literal>field</literal> element. The <literal>name</literal>
        attribute corresponds to the name of the field considered. <phrase
        role="tck-testable">If <literal>ignore-annotations</literal> is
        declared, Bean Validation must honor the explicit value for this
        element.</phrase> <phrase role="tck-testable">If not declared, the
        default value defined in the encapsulating <classname>bean</classname>
        element is considered.</phrase></para>

        <para><phrase role="tck-testable">When
        <literal>ignore-annotations</literal> is true, field-level Bean
        Validation annotations on the targeted field are ignored (including
        <classname>@Valid</classname><phrase revisionflag="added"> and
        <classname>@ConvertGroup</classname></phrase>).</phrase> When
        <literal>ignore-annotations</literal> is false:</para>

        <itemizedlist>
          <listitem>
            <para role="tck-testable">Constraints declared in XML and
            constraints declared in annotations are added and form the list of
            field-level declared constraints.</para>
          </listitem>

          <listitem>
            <para><classname>@Valid</classname> is considered unless the
            <literal>valid</literal> element is explicitly used. <phrase
            role="tck-testable">Note that the only way to disable cascading on
            a field marked as <classname>@Valid</classname> is to use
            <literal>ignore-annotations=true</literal>.</phrase></para>
          </listitem>

          <listitem revisionflag="added" role="tck-testable">
            <para><phrase role="tck-testable">Group conversions declared in
            XML and via the <classname>@ConvertGroup</classname> annotation
            are added and form the list of applied conversions.</phrase> Note
            that the rules for the declaration of group conversions as
            outlined in <xref
            linkend="constraintdeclarationvalidationprocess-groupsequence-groupconversion"/>
            apply, in particular it is not legal to declare several
            conversions for the same source group.</para>
          </listitem>
        </itemizedlist>

        <para role="tck-testable">If the name of the field does not correspond
        to a field in the given bean a
        <classname>ValidationException</classname> is raised.</para>

        <example revisionflag="changed">
          <title>Field-level declaration</title>

          <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.1.xsd"
        version="1.1"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;
        &lt;field name="firstName"&gt;
            [...]
        &lt;/field&gt;
        &lt;field name="orders"&gt;
            &lt;valid/&gt;
            [...]
        &lt;/field&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
        </example>
      </section>

      <section>
        <title>Property-level overriding</title>

        <para>Property-level annotations are described via the
        <literal>getter</literal> element. <phrase role="tck-testable">The
        <literal>name</literal> attribute corresponds to the name of the
        property considered as defined in <xref
        linkend="constraintdeclarationvalidationprocess-requirements-property"/>
        (for example a getter <literal>String getAge()</literal> would have
        <literal>&lt;getter name="age"/&gt;</literal> as a corresponding
        descriptor). If <literal>ignore-annotations</literal> is declared,
        Bean Validation must honor the explicit value for this
        element.</phrase> <phrase role="tck-testable">If not declared, the
        default value defined in the encapsulating <classname>bean</classname>
        element is considered.</phrase></para>

        <para><phrase role="tck-testable">When
        <literal>ignore-annotations</literal> is true, property-level Bean
        Validation annotations on the targeted property are ignored (including
        <classname>@Valid</classname> <phrase revisionflag="added">and
        <classname>@ConvertGroup</classname></phrase>).</phrase> When
        <literal>ignore-annotations</literal> is false:</para>

        <itemizedlist>
          <listitem>
            <para role="tck-testable">Constraints declared in XML and
            constraints declared in annotations are added and form the list of
            property-level declared constraints.</para>
          </listitem>

          <listitem>
            <para><classname>@Valid</classname> is considered unless the
            <literal>valid</literal> element is explicitly used. <phrase
            role="tck-testable">Note that the only way to disable cascading on
            a property marked as <classname>@Valid</classname> is to use
            <literal>ignore-annotations=true</literal>.</phrase></para>
          </listitem>

          <listitem revisionflag="added" role="tck-testable">
            <para><phrase role="tck-testable">Group conversions declared in
            XML and via the <classname>@ConvertGroup</classname> annotation
            are added and form the list of applied conversions.</phrase> Note
            that the rules for the declaration of group conversions as
            outlined in <xref
            linkend="constraintdeclarationvalidationprocess-groupsequence-groupconversion"/>
            apply, in particular it is not legal to declare several
            conversions for the same source group.</para>
          </listitem>
        </itemizedlist>

        <para role="tck-testable">If the name of the property does not
        correspond to a property in the given bean a
        <classname>ValidationException</classname> is raised.</para>

        <example revisionflag="changed">
          <title>Property-level declaration</title>

          <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.1.xsd"
        version="1.1"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;
        &lt;getter name="firstName"&gt;
            [...]
        &lt;/getter&gt;
        &lt;getter name="orders"&gt;
            &lt;valid/&gt;
            [...]
        &lt;/getter&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
        </example>
      </section>

      <section id="xml-mapping-constraintdeclarationinxml-constructorleveloverriding"
               revisionflag="added">
        <title>Constructor-level overriding</title>

        <para>Constructor-level annotations are described via the
        <literal>constructor</literal> element.</para>

        <para role="tck-testable">To identify a constructor to be configured,
        zero or more parameter elements are used, matching the number and
        types of parameters of the configured constructor. When configuring
        the default constructor, no parameter element is to be used. The
        parameter types are specified using their fully qualified name; If the
        <literal>default-package</literal> element is configured for the
        mapping file, any unqualified class names will be resolved using the
        given default package. Primitive types (<classname>int</classname>,
        <classname>long</classname> etc.) are referenced by specifying the
        corresponding keyword of the Java language.</para>

        <para><note>
            <para>You must declare all parameters even if they are not
            reconfigured to ensure the right constructor is identified.</para>
          </note></para>

        <para role="tck-testable">If no constructor with the specified
        parameter types exists in the given bean a
        <classname>ValidationException</classname> is raised.</para>

        <para role="tck-testable">The optional <literal>return-value</literal>
        element is used to change the configuration of a constructor's return
        value if required.</para>

        <para><phrase role="tck-testable">The constraints applying for a
        constructor's parameters and its return value are specified by adding
        <literal>constraint</literal> elements to the
        <literal>parameter</literal> and <literal>return-value</literal>
        elements respectively.</phrase> <phrase role="tck-testable">Whether or
        not to perform cascaded validation is controlled using the
        <literal>valid</literal> element</phrase>.<phrase role="tck-testable">
        Group conversion rules for cascaded validation are specified using the
        <literal>convert-group</literal> element. </phrase><phrase
        role="tck-testable">By adding
        <literal>cross-parameter-constraint</literal> elements to the
        <literal>constructor</literal> element, cross-parameter constraints
        can be configured.</phrase></para>

        <para role="tck-testable">If <literal>ignore-annotations</literal> is
        declared on the parameter or return value level, Bean Validation must
        honor the explicit value for this element. Otherwise, if
        <literal>ignore-annotations</literal> is declared for the
        <literal>constructor</literal> element, Bean Validation must honor
        this value. Otherwise, the default value declared in the encapsulating
        <literal>bean</literal> element is considered.</para>

        <para><phrase role="tck-testable">When
        <literal>ignore-annotations</literal> is true, Bean Validation
        annotations on the targeted constructor or parameter are ignored
        (including <classname>@Valid</classname> <phrase
        revisionflag="added">and
        <classname>@ConvertGroup</classname></phrase>).</phrase> When
        <literal>ignore-annotations</literal> is false:</para>

        <itemizedlist>
          <listitem>
            <para role="tck-testable">Constraints declared in XML and
            constraints declared in annotations are added and form the list of
            declared parameter, cross-parameter or return value constraints
            respectively.</para>
          </listitem>

          <listitem>
            <para><phrase role="tck-testable"><classname>@Valid</classname> is
            considered unless the <literal>valid</literal> element is
            explicitly used.</phrase> <phrase role="tck-testable">Note that
            the only way to disable cascading on a constructor parameter or
            return value marked as <classname>@Valid</classname> is to use
            <literal>ignore-annotations=true</literal>.</phrase></para>
          </listitem>

          <listitem revisionflag="added" role="tck-testable">
            <para><phrase role="tck-testable">Group conversions declared in
            XML and via the <classname>@ConvertGroup</classname> annotation
            are added and form the list of applied conversions.</phrase> Note
            that the rules for the declaration of group conversions as
            outlined in <xref
            linkend="constraintdeclarationvalidationprocess-groupsequence-groupconversion"/>
            apply, in particular it is not legal to declare several
            conversions for the same source group.</para>
          </listitem>
        </itemizedlist>

        <para><example>
            <title>Constructor-level declaration</title>

            <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.1.xsd"
        version="1.1"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;
        &lt;constructor ignore-annotations="true"&gt;
            &lt;parameter type="java.lang.String"&gt;
                [...]
            &lt;/parameter&gt;
            &lt;parameter type="int"&gt;
                &lt;valid/&gt;
                [...]
            &lt;/parameter&gt;
            &lt;parameter type="long" ignore-annotations="false"/&gt;
            &lt;return-value&gt;
                &lt;valid/&gt;
                [...]
            &lt;/return-value&gt;
            [...]
        &lt;/constructor&gt;

    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
          </example></para>
      </section>

      <section id="xml-mapping-constraintdeclarationinxml-methodleveloverriding"
               revisionflag="added">
        <title>Method-level overriding</title>

        <para>Method-level annotations are described via the
        <literal>method</literal> element.</para>

        <para role="tck-testable">To identify a method to be configured, its
        name and zero or more parameter elements are specified, matching the
        number and types of parameters of the configured method. The parameter
        types are specified using their fully qualified name; If the
        <literal>default-package</literal> element is configured for the
        mapping file, any unqualified class names will be resolved using the
        given default package. Primitive types (<classname>int</classname>,
        <classname>long</classname> etc.) are referenced by specifying the
        corresponding keyword of the Java language.</para>

        <para><note>
            <para>You must declare all parameters even if they are not
            reconfigured to ensure the right method is identified.</para>
          </note><note role="tck-testable">
            <para>A given getter method representing a JavaBeans property may
            either be configured using the <literal>getter</literal> or the
            <literal>method</literal> element, but not both. If a
            <literal>getter</literal> element and a <literal>method</literal>
            element referring to the same method are detected by the Bean
            Validation provider, a <classname>ValidationException</classname>
            is raised.</para>
          </note></para>

        <para role="tck-testable">If no method with the specified name and
        parameter types exists in the given bean a
        <classname>ValidationException</classname> is raised.</para>

        <para role="tck-testable">The optional <literal>return-value</literal>
        element is used to change the configuration of a mehod's return value
        if required.</para>

        <para><phrase role="tck-testable">The constraints applying for a
        method's parameters and its return value are specified by adding
        <literal>constraint</literal> elements to the
        <literal>parameter</literal> and <literal>return-value</literal>
        elements respectively.</phrase> <phrase role="tck-testable">Whether or
        not to perform cascaded validation is controlled using the
        <literal>valid</literal> element.</phrase><phrase role="tck-testable">
        Group conversion rules for cascaded validation are specified using the
        <literal>convert-group</literal> element. </phrase><phrase
        role="tck-testable">By adding
        <literal>cross-parameter-constraint</literal> elements to the
        <literal>method</literal> element, cross-parameter constraints can be
        configured.</phrase></para>

        <para role="tck-testable">If <literal>ignore-annotations</literal> is
        declared on the parameter or return value level, Bean Validation must
        honor the explicit value for this element. Otherwise, if
        <literal>ignore-annotations</literal> is declared for the
        <literal>method</literal> element, Bean Validation must honor this
        value. Otherwise, the default value declared in the encapsulating
        <literal>bean</literal> element is considered.</para>

        <para><phrase role="tck-testable">When
        <literal>ignore-annotations</literal> is true, Bean Validation
        annotations on the targeted method or parameter are ignored (including
        <classname>@Valid</classname> <phrase revisionflag="added">and
        <classname>@ConvertGroup</classname></phrase>).</phrase> When
        <literal>ignore-annotations</literal> is false:</para>

        <itemizedlist>
          <listitem>
            <para role="tck-testable">Constraints declared in XML and
            constraints declared in annotations are added and form the list of
            declared parameter, cross-parameter or return value constraints
            respectively.</para>
          </listitem>

          <listitem>
            <para><phrase role="tck-testable"><classname>@Valid</classname> is
            considered unless the <literal>valid</literal> element is
            explicitly used.</phrase> <phrase role="tck-testable">Note that
            the only way to disable cascading on a method parameter or return
            value marked as <classname>@Valid</classname> is to use
            <literal>ignore-annotations=true</literal>.</phrase></para>
          </listitem>

          <listitem revisionflag="added" role="tck-testable">
            <para><phrase role="tck-testable">Group conversions declared in
            XML and via the <classname>@ConvertGroup</classname> annotation
            are added and form the list of applied conversions.</phrase> Note
            that the rules for the declaration of group conversions as
            outlined in <xref
            linkend="constraintdeclarationvalidationprocess-groupsequence-groupconversion"/>
            apply, in particular it is not legal to declare several
            conversions for the same source group.</para>
          </listitem>
        </itemizedlist>

        <para><example>
            <title>Method-level declaration</title>

            <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.1.xsd"
        version="1.1"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;
        &lt;method name="update" ignore-annotations="true"&gt;
            &lt;parameter type="java.lang.String"&gt;
                [...]
            &lt;/parameter&gt;
            &lt;parameter type="int"&gt;
                &lt;valid/&gt;
                [...]
            &lt;/parameter&gt;
            &lt;parameter type="long" ignore-annotations="false"/&gt;
            &lt;return-value&gt;
                &lt;valid/&gt;
                [...]
            &lt;/return-value&gt;
            [...]
        &lt;/method&gt;

    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
          </example></para>
      </section>

      <section>
        <title>Constraint declaration</title>

        <para><phrase revisionflag="changed">New constraint declarations are
        represented by the <literal>constraint</literal> element for generic
        constraints and the <literal>cross-parameter-constraint</literal>
        element for cross-parameter constraints.</phrase> The
        <literal>annotation</literal> attribute is the class name of the
        annotation representing the constraint. Message, groups and payload
        are defined respectively by the <literal>message</literal>,
        <literal>groups</literal> and <literal>payload</literal>
        elements.</para>

        <para>Other custom elements of an annotation are represented by
        <literal>element</literal>. <phrase role="tck-testable">The
        <literal>name</literal> attribute is mandatory and represents the name
        of the element in the constraint declaration.</phrase> <phrase
        role="tck-testable tck-needs-update"><quote>message</quote>,
        <quote>groups</quote> and <quote>payload</quote> are not permitted
        names, use the <literal>message</literal>, <literal>groups</literal>
        or <literal>payload</literal> elements instead. Otherwise a
        <classname>ValidationException</classname> is raised.</phrase></para>

        <para><phrase role="tck-testable">If the element represents a
        primitive type, a class or an enum, the string representation of its
        value is placed in the element itself.</phrase> See <xref
        linkend="xml-mapping-typeconversion"/> for a detailed explanation of
        the conversion rules from string to the type.</para>

        <para role="tck-testable">If the element represents a primitive type
        array, a class array or an enum array, the string representation of
        each value is placed in a <literal>value</literal> element placed
        under the element itself.</para>

        <para><phrase role="tck-testable">If the element represents an
        annotation, the <literal>annotation</literal> element is used to
        represent the annotation and placed under
        <literal>element</literal>.</phrase> An <literal>annotation</literal>
        element contains <literal>element</literal> elements.</para>

        <para role="tck-testable">If the element represents an array of
        annotations, one or more <literal>annotation</literal> elements are
        placed under <literal>element</literal>.</para>

        <para><phrase role="tck-testable">Elements with default values in the
        annotation definition do not have to be represented in XML: the
        default value will be used in this case.</phrase> <phrase
        role="tck-testable">If an XML constraint declaration is missing
        mandatory elements, or if it contains elements not part of the
        constraint definition, a <classname>ValidationException</classname> is
        raised.</phrase></para>

        <example revisionflag="changed">
          <title>Constraint declaration</title>

          <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.1.xsd"
        version="1.1"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;

        &lt;field name="firstName"&gt;


            &lt;!-- @LooksLike(patterns={
                      @Pattern(value="myRegExp", flag=PatternFlag.INSENSITIVE),
                      @Pattern(value="my2ndRegExp")}
                  )
             --&gt;
            &lt;constraint annotation="com.acme.app.constraint.LooksLike"&gt;
                &lt;element name="patterns"&gt;
                    &lt;annotation&gt;
                        &lt;element name="value"&gt;myRegExp&lt;/element&gt;
                        &lt;element name="flag"&gt;
                            &lt;value&gt;INSENSITIVE&lt;/value&gt;
                        &lt;/element&gt;
                    &lt;/annotation&gt;
                    &lt;annotation&gt;
                        &lt;element name="value"&gt;my2ndRegExp&lt;/element&gt;
                    &lt;/annotation&gt;
                &lt;/element&gt;
            &lt;/constraint&gt;


        &lt;/field&gt;
        &lt;field name="orders"&gt;
            &lt;valid/&gt;


            &lt;!-- @DiscreteSize(value={ 0, 20 } )
             --&gt;
            &lt;constraint annotation="com.acme.app.constraint.DiscreteSize"&gt;
                &lt;element name="value"&gt;
                    &lt;value&gt;0&lt;/value&gt;
                    &lt;value&gt;20&lt;/value&gt;
                &lt;/element&gt;
            &lt;/constraint&gt;


        &lt;/field&gt;

        &lt;getter name="orders"&gt;
            &lt;valid/&gt;


            &lt;!-- @Size(message="Size is limited",
                       groups={Default.class, LightValidation.class},
                       max=30
                 )
            --&gt;
            &lt;constraint annotation="javax.validation.constraints.Size"&gt;
                &lt;message&gt;Size is limited&lt;/message&gt;
                &lt;groups&gt;
                    &lt;value&gt;com.acme.app.model.LightValidation&lt;/value&gt;
                    &lt;value&gt;javax.persistence.Default&lt;/value&gt;
                &lt;/groups&gt;
                &lt;payload&gt;
                    &lt;value&gt;com.acme.app.model.WARN&lt;/value&gt;
                &lt;/payload&gt;
                &lt;element name="max"&gt;30&lt;/element&gt;
            &lt;/constraint&gt;


        &lt;/getter&gt;

        &lt;constructor ignore-annotations="true"&gt;
            &lt;parameter type="java.lang.String"&gt;

                &lt;!-- @DiscreteSize(value={ 0, 20 } ) --&gt;
                &lt;constraint annotation="com.acme.app.constraint.DiscreteSize"&gt;
                    &lt;element name="value"&gt;
                        &lt;value&gt;0&lt;/value&gt;
                        &lt;value&gt;20&lt;/value&gt;
                    &lt;/element&gt;
                &lt;/constraint&gt;
            &lt;/parameter&gt;
        &lt;/constructor&gt;

        &lt;method name="update" ignore-annotations="true"&gt;
            &lt;parameter type="java.lang.String"&gt;

                &lt;!-- @DiscreteSize(value={ 0, 20 } ) --&gt;
                &lt;constraint annotation="com.acme.app.constraint.DiscreteSize"&gt;
                    &lt;element name="value"&gt;
                        &lt;value&gt;0&lt;/value&gt;
                        &lt;value&gt;20&lt;/value&gt;
                    &lt;/element&gt;
                &lt;/constraint&gt;
            &lt;/parameter&gt;

            &lt;return-value&gt;

                &lt;!-- @ValidCustomer --&gt;
                &lt;constraint annotation="com.acme.app.constraint.ValidCustomer"/&gt;
            &lt;/return-value&gt;
        &lt;/method&gt;

        &lt;method name="resetPassword" ignore-annotations="false"&gt;
            &lt;parameter type="java.lang.String"/&gt;
            &lt;parameter type="java.lang.String"/&gt;

            &lt;!-- @ValidResetPasswordParameters --&gt;
            &lt;cross-parameter-constraint annotation="com.acme.app.constraint.ValidResetPasswordParameters"/&gt;
        &lt;/method&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
        </example>
      </section>

      <section revisionflag="added">
        <title>Declaration of group conversions</title>

        <para role="tck-testable">Group conversion rules are declared by
        specifying one ore more <literal>convert-group</literal> elements
        within the <literal>field</literal>, <literal>getter</literal>,
        <literal>parameter</literal> and <literal>return-value</literal>
        elements.</para>

        <para role="tck-testable">Source and target group of a conversion rule
        are given by specifying there fully-qualified names within the
        <literal>from</literal> and <literal>to</literal> attribute
        respectively. If the <literal>default-package</literal> element is
        configured for the mapping file, any unqualified class names will be
        resolved using the given default package.</para>

        <example>
          <title>Declaration of group conversions</title>

          <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.1.xsd"
        version="1.1"&gt;
    &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
    &lt;bean class="Customer" ignore-annotations="false"&gt;

        &lt;field name="firstName"&gt;
            &lt;convert-group from="javax.validation.groups.Default" to="com.acme.CustomerBasic"/&gt;
            &lt;convert-group from="com.acme.CustomerComplex" to="com.acme.CustomerComplex"/&gt;
        &lt;/field&gt;

        &lt;getter name="orders"&gt;
            &lt;convert-group from="javax.validation.groups.Default" to="com.acme.CustomerBasic"/&gt;
        &lt;/getter&gt;

        &lt;constructor&gt;
            &lt;parameter type="java.lang.String"&gt;
                &lt;convert-group from="javax.validation.groups.Default" to="com.acme.CustomerBasic"/&gt;
            &lt;/parameter&gt;
            &lt;return-value&gt;
                &lt;convert-group from="javax.validation.groups.Default" to="com.acme.CustomerBasic"/&gt;
            &lt;/return-value&gt;
        &lt;/constructor&gt;

        &lt;method name="update"&gt;
            &lt;parameter type="java.lang.String"&gt;
                &lt;convert-group from="javax.validation.groups.Default" to="com.acme.CustomerBasic"/&gt;
            &lt;/parameter&gt;
            &lt;return-value&gt;
                &lt;convert-group from="javax.validation.groups.Default" to="com.acme.CustomerBasic"/&gt;
            &lt;/return-value&gt;
        &lt;/constructor&gt;
    &lt;/bean&gt;
&lt;/constraint-mappings&gt;</programlisting>
        </example>
      </section>
    </section>

    <section id="xml-mapping-constraintdefinition">
      <title>Overriding constraint definitions in XML</title>

      <para>A constraint definition (i.e. the annotation representing a
      constraint), cannot be fully expressed in XML but the list of
      <classname>ConstraintValidator</classname> associated to a given
      constraint can be altered.</para>

      <para><phrase role="tck-testable">A constraint definition is represented
      by a <literal>constraint-definition</literal> element.</phrase> The
      <literal>annotation</literal> attribute represents the constraint
      annotation being altered. The <literal>validated-by</literal> elements
      represent the (ordered) list of
      <classname>ConstraintValidator</classname> implementations associated to
      the constraint.</para>

      <para><phrase role="tck-testable">If
      <literal>include-existing-validator</literal> is set to false,
      <classname>ConstraintValidator</classname> defined on the constraint
      annotation are ignored.</phrase> <phrase role="tck-testable">If set to
      true, the list of <classname>ConstraintValidator</classname>s described
      in XML are concatenated to the list of
      <classname>ConstraintValidator</classname> described on the annotation
      to form a new array of <classname>ConstraintValidator</classname>
      evaluated.</phrase> <phrase role="tck-testable">Annotation based
      <classname>ConstraintValidator</classname> come before XML based
      <classname>ConstraintValidator</classname>s in the array.</phrase>
      <phrase role="tck-testable">The new <phrase
      revisionflag="added">validator</phrase> list is returned by
      <methodname>ConstraintDescriptor.getConstraintValidatorClasses()</methodname>.</phrase></para>

      <example revisionflag="changed">
        <title>Overriding constraint definitions</title>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;constraint-mappings
        xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation=
            "http://jboss.org/xml/ns/javax/validation/mapping validation-mapping-1.1.xsd"
        version="1.1"&gt;
   &lt;default-package&gt;com.acme.app.domain&lt;/default-package&gt;
   &lt;bean class="com.acme.common.model.Address"&gt;
       [...]
    &lt;/bean&gt;

    &lt;constraint-definition annotation="javax.validation.constraints.Size"&gt;
        &lt;validated-by include-existing-validators="true"&gt;
            &lt;value&gt;com.acme.app.constraint.SizeValidatorForDictionary&lt;/value&gt;
        &lt;/validated-by&gt;
    &lt;/constraint-definition&gt;
    &lt;constraint-definition annotation="AcmeOrderNumber"&gt;
        [...]
    &lt;/constraint-definition&gt;
&lt;/constraint-mappings&gt;</programlisting>
      </example>
    </section>

    <section id="xml-mapping-typeconversion">
      <title>Converting the string representation of a value</title>

      <para>Primitive types, <classname>Class</classname> and
      <classname>Enum</classname> are represented as strings in the XML
      descriptor. Elements of an array are represented by the
      <literal>value</literal> element.</para>

      <para><classname>byte</classname> are represented according to the rules
      defined in <methodname>Byte.parseByte(String)</methodname>.</para>

      <para><classname>short</classname> are represented according to the
      rules defined in
      <methodname>Short.parseShort(String)</methodname>.</para>

      <para><classname>int</classname> are represented according to the rules
      defined in <methodname>Integer.parseInt(String)</methodname>.</para>

      <para><classname>long</classname> are represented according to the rules
      defined in <methodname>Long.parseLong(String)</methodname>.</para>

      <para><classname>float</classname> are represented according to the
      rules defined in
      <methodname>Float.parseFloat(String)</methodname>.</para>

      <para><classname>double</classname> are represented according to the
      rules defined in
      <methodname>Double.parseDouble(String)</methodname>.</para>

      <para><classname>boolean</classname> are represented according to the
      rules defined in
      <methodname>Boolean.parseBoolean(String)</methodname>.</para>

      <para><classname>char</classname> are represented according to the
      following rules:</para>

      <itemizedlist>
        <listitem>
          <para>the string must be of one character long</para>
        </listitem>

        <listitem>
          <para>the character extracted from the string is the returned
          <classname>char</classname></para>
        </listitem>
      </itemizedlist>

      <para>A <classname>Class</classname> is represented by the fully
      qualified class name of the class. Note that if the raw string is
      unqualified, default package is taken into account.</para>

      <para>An enum is represented by its <literal>enum.name()</literal>
      value.</para>

      <para>If any of the string representation does not match its type
      counterpart, a <classname>ValidationException</classname> is
      raised.</para>
    </section>

    <section id="xml-mapping-xsd">
      <title>XML Schema</title>

      <para>This section contains the XML schema used for constraint mapping
      <phrase revisionflag="added">descriptors</phrase>.</para>

      <para revisionflag="added">From Bean Validation revision 1.1 onwards,
      mapping authors must specify the used version of the schema within the
      <literal>version</literal> attribute of the
      <literal>constraint-mappings</literal> element. <phrase
      role="tck-testable">Implementations supporting Bean Validation 1.1 must
      properly parse mapping descriptors of Bean Validation 1.0 and
      1.1.</phrase> <phrase role="tck-testable">If the
      <literal>version</literal> attribute attribute is not given, schema
      version 1.0 is to be assumed by the Bean Validation
      Provider.</phrase></para>

      <para revisionflag="added" role="tck-testable">In case an unknown
      version is given (e.g. if a mapping descriptor adhering to a future
      schema version is parsed by a Bean Validation 1.1 provider) a
      <classname>ValidationException</classname> is raised.</para>

      <example revisionflag="changed">
        <title>XML schema for constraint mapping descriptors</title>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema attributeFormDefault="unqualified"
           elementFormDefault="qualified"
           targetNamespace="http://jboss.org/xml/ns/javax/validation/mapping"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:map="http://jboss.org/xml/ns/javax/validation/mapping"
           version="1.1"&gt;

    &lt;xs:annotation&gt;
        &lt;xs:documentation&gt;&lt;![CDATA[
            This is the XML Schema for Bean Validation constraint mapping files.

            Bean Validation constraint mapping files must indicate the Bean Validation
            XML schema by using the constraint mapping namespace:

            http://jboss.org/xml/ns/javax/validation/mapping

            and indicate the version of the schema by using the version attribute
            as shown below:

            &lt;constraint-mappings
                xmlns="http://jboss.org/xml/ns/javax/validation/mapping"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="
                    http://jboss.org/xml/ns/javax/validation/mapping
                    validation-mapping-1.1.xsd"
                version="1.1"&gt;
                ...
            &lt;/constraint-mappings&gt;
        ]]&gt;
        &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;

    &lt;xs:element name="constraint-mappings" type="map:constraint-mappingsType"/&gt;

    &lt;xs:complexType name="payloadType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="groupsType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="groupSequenceType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="groupConversionType"&gt;
        &lt;xs:attribute type="xs:string" name="from" use="required"/&gt;
        &lt;xs:attribute type="xs:string" name="to" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="constraint-mappingsType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="default-package" minOccurs="0"/&gt;
            &lt;xs:element type="map:beanType"
                        name="bean"
                        maxOccurs="unbounded"
                        minOccurs="0"/&gt;
            &lt;xs:element type="map:constraint-definitionType"
                        name="constraint-definition"
                        maxOccurs="unbounded"
                        minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute name="version" type="map:versionType" fixed="1.1" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:simpleType name="versionType"&gt;
        &lt;xs:restriction base="xs:token"&gt;
            &lt;xs:pattern value="[0-9]+(\.[0-9]+)*"/&gt;
        &lt;/xs:restriction&gt;
    &lt;/xs:simpleType&gt;
    &lt;xs:complexType name="validated-byType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:boolean" name="include-existing-validators" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="constraintType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="message" minOccurs="0"/&gt;
            &lt;xs:element type="map:groupsType"
                        name="groups"
                        minOccurs="0"/&gt;
            &lt;xs:element type="map:payloadType"
                        name="payload"
                        minOccurs="0"/&gt;
            &lt;xs:element type="map:elementType"
                        name="element"
                        maxOccurs="unbounded"
                        minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="annotation" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="elementType" mixed="true"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="value" maxOccurs="unbounded" minOccurs="0"/&gt;
            &lt;xs:element type="map:annotationType"
                        name="annotation"
                        maxOccurs="unbounded"
                        minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="name" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="classType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:groupSequenceType"
                        name="group-sequence"
                        minOccurs="0"/&gt;
            &lt;xs:element type="map:constraintType"
                        name="constraint"
                        maxOccurs="unbounded"
                        minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="beanType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:classType"
                        name="class"
                        minOccurs="0"&gt;
            &lt;/xs:element&gt;
            &lt;xs:element type="map:fieldType"
                        name="field"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
            &lt;xs:element type="map:getterType"
                        name="getter"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
            &lt;xs:element type="map:constructorType"
                        name="constructor"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
            &lt;xs:element type="map:methodType"
                        name="method"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="class" use="required"/&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="annotationType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:elementType"
                        name="element"
                        maxOccurs="unbounded"
                        minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="getterType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="valid" minOccurs="0" fixed=""/&gt;
            &lt;xs:element type="map:constraintType"
                        name="constraint"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
            &lt;xs:element type="map:groupConversionType"
                        name="convert-group"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="name" use="required"/&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="methodType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:parameterType"
                        name="parameter"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
            &lt;xs:element type="map:returnValueType"
                        name="return-value"
                        minOccurs="0"
                        maxOccurs="1"/&gt;
            &lt;xs:element type="map:constraintType"
                        name="cross-parameter-constraint"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="name" use="required"/&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="constructorType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:parameterType"
                        name="parameter"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
            &lt;xs:element type="map:returnValueType"
                        name="return-value"
                        minOccurs="0"
                        maxOccurs="1"/&gt;
            &lt;xs:element type="map:constraintType"
                        name="cross-parameter-constraint"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="parameterType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="valid" minOccurs="0" fixed=""/&gt;
            &lt;xs:element type="map:constraintType"
                        name="constraint"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
            &lt;xs:element type="map:groupConversionType"
                        name="convert-group"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="type" use="required"/&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="returnValueType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="valid" minOccurs="0" fixed=""/&gt;
            &lt;xs:element type="map:constraintType"
                        name="constraint"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
            &lt;xs:element type="map:groupConversionType"
                        name="convert-group"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="constraint-definitionType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="map:validated-byType"
                        name="validated-by"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="annotation" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="fieldType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="valid" minOccurs="0" fixed=""/&gt;
            &lt;xs:element type="map:constraintType"
                        name="constraint"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
            &lt;xs:element type="map:groupConversionType"
                        name="convert-group"
                        minOccurs="0"
                        maxOccurs="unbounded"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute type="xs:string" name="name" use="required"/&gt;
        &lt;xs:attribute type="xs:boolean" name="ignore-annotations" use="optional"/&gt;
    &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;</programlisting>
      </example>
    </section>
  </section>

  <section id="xml-config-xsd">
    <title>Configuration schema</title>

    <para>XML Configuration is set in
    <filename>META-INF/validation.xml</filename>. The file is optional. The
    XML schema followed by the configuration file is as followed.</para>

    <example revisionflag="changed">
      <title>XML configuration XSD</title>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema attributeFormDefault="unqualified"
           elementFormDefault="qualified"
           targetNamespace="http://jboss.org/xml/ns/javax/validation/configuration"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:config="http://jboss.org/xml/ns/javax/validation/configuration"
           version="1.1"&gt;

    &lt;xs:annotation&gt;
        &lt;xs:documentation&gt;&lt;![CDATA[
            This is the XML Schema for the Bean Validation configuration file.
            The configuration file must be named "META-INF/validation.xml".

            Bean Validation configuration files must indicate the Bean Validation
            XML schema by using the validation namespace:

            http://jboss.org/xml/ns/javax/validation/configuration

            and indicate the version of the schema by using the version attribute
            as shown below:

            &lt;validation-config
                xmlns="http://jboss.org/xml/ns/javax/validation/configuration"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="
                    http://jboss.org/xml/ns/javax/validation/configuration
                    validation-configuration-1.1.xsd"
                version="1.1"&gt;
                ...
            &lt;/validation-config&gt;
        ]]&gt;
        &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;

    &lt;xs:element name="validation-config" type="config:validation-configType"/&gt;
    &lt;xs:complexType name="validation-configType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element type="xs:string" name="default-provider" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="message-interpolator" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="traversable-resolver" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="constraint-validator-factory" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="parameter-name-provider" minOccurs="0"/&gt;
            &lt;xs:element type="config:validated-executablesType" name="validated-executables" minOccurs="0"/&gt;
            &lt;xs:element type="xs:string" name="constraint-mapping" maxOccurs="unbounded" minOccurs="0"/&gt;
            &lt;xs:element type="config:propertyType" name="property" maxOccurs="unbounded" minOccurs="0"/&gt;
        &lt;/xs:sequence&gt;
        &lt;xs:attribute name="version" type="config:versionType" fixed="1.1" use="required"/&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="validated-executablesType"&gt;
        &lt;xs:sequence&gt;
            &lt;xs:element name="executable-type" maxOccurs="unbounded" minOccurs="1"&gt;
                &lt;xs:simpleType&gt;
                    &lt;xs:restriction base="xs:string"&gt;
                        &lt;xs:enumeration value="NONE"/&gt;
                        &lt;xs:enumeration value="CONSTRUCTORS"/&gt;
                        &lt;xs:enumeration value="NON_GETTER_METHODS"/&gt;
                        &lt;xs:enumeration value="GETTER_METHODS"/&gt;
                        &lt;xs:enumeration value="ALL"/&gt;
                    &lt;/xs:restriction&gt;
                &lt;/xs:simpleType&gt;
            &lt;/xs:element&gt;
        &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="propertyType"&gt;
        &lt;xs:simpleContent&gt;
            &lt;xs:extension base="xs:string"&gt;
                &lt;xs:attribute name="name" use="required" type="xs:string"/&gt;
            &lt;/xs:extension&gt;
        &lt;/xs:simpleContent&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:simpleType name="versionType"&gt;
        &lt;xs:restriction base="xs:token"&gt;
            &lt;xs:pattern value="[0-9]+(\.[0-9]+)*" /&gt;
        &lt;/xs:restriction&gt;
    &lt;/xs:simpleType&gt;
&lt;/xs:schema&gt;</programlisting>
    </example>

    <para revisionflag="added">From Bean Validation revision 1.1 onwards, the
    used version of the schema must be specified within the
    <literal>version</literal> attribute of the
    <literal>validation-config</literal> element. <phrase
    role="tck-testable">Implementations supporting Bean Validation 1.1 must
    properly parse configuration descriptors of Bean Validation 1.0 and
    1.1.</phrase> <phrase role="tck-testable">If the
    <literal>version</literal> attribute attribute is not given, schema
    version 1.0 is to be assumed by the Bean Validation
    Provider.</phrase></para>

    <para revisionflag="added" role="tck-testable">In case an unknown version
    is given a <classname>ValidationException</classname> is raised.</para>

    <para>See <xref linkend="xml-config"/> for more information on XML based
    configuration.</para>
  </section>
</chapter>
