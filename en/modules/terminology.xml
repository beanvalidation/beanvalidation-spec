<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"../../docbook-support/support/docbook-dtd/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../global.ent">
%BOOK_ENTITIES;
]>
<appendix id="terminology">
  <title>Terminology</title>

  <para>This appendix aims at giving an overview on the different key terms
  used through this specification. They are not to be considered formal
  definitions. Formal definitions are to be inferred from the core
  specification.</para>

  <table>
    <title>terminology</title>

    <tgroup cols="2">
      <colspec align="center" colnum="3"/>

      <thead>
        <row>
          <entry>Term</entry>

          <entry colsep="" spanname="">Definition</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry>Constraint</entry>

          <entry>A restriction on a bean instance, the value of a field or the
          value of a JavaBean property</entry>
        </row>

        <row>
          <entry>Constraint declaration</entry>

          <entry>Assignment of a constraint to a target (bean, field,
          property) for a specific class. Typically by declaring an annotation
          on the target but can also be done through a XML deployment
          descriptor</entry>
        </row>

        <row>
          <entry>Validation routine</entry>

          <entry><para>Sequence of operations executed by the Bean Validation
          provider to validate a given object graph</para></entry>
        </row>

        <row>
          <entry>Constraint definition</entry>

          <entry>Defines a type of constraint, its attributes and the actual
          constraint validation implementations. Done through annotations. The
          list of constraint validation implementations can be provided via
          XML</entry>
        </row>

        <row>
          <entry>group</entry>

          <entry>Constraints can belong to one or more group or context.
          Useful to apply a subset of the constraints for a given use case. By
          default, the <literal>Default</literal> group is used.</entry>
        </row>

        <row>
          <entry>group sequence</entry>

          <entry>Define a group ordering in the validation process. If a given
          group in the sequence contains one or more failure, the following
          groups in the sequence must be ignored.</entry>
        </row>

        <row>
          <entry>Constraint validation</entry>

          <entry>Constraint logic algorithm used to determine whether a given
          value passes a constraint or not.</entry>
        </row>

        <row>
          <entry>Constraint validation implementation</entry>

          <entry>Class implementing the constraint logic and used to determine
          whether a given value pass a constraint or not.</entry>
        </row>

        <row>
          <entry>Bean validation provider</entry>

          <entry>Product implementing this specification</entry>
        </row>

        <row>
          <entry>Message interpolator</entry>

          <entry>Algorithm used to build the end user message associated to a
          constraint failure. Typically useful for i18n</entry>
        </row>

        <row>
          <entry>Constraint metadata API</entry>

          <entry>API exposing the constraints applied to a given bean type.
          Also considered one of the integration points with other JSR or
          frameworks.</entry>
        </row>

        <row>
          <entry>Bootstrap API</entry>

          <entry>Bootstrapping part of the Bean Validation API producing a
          <classname>ValidatorFactory</classname>.</entry>
        </row>

        <row>
          <entry>javax.validation.ConstraintValidator</entry>

          <entry>Interface implemented by a constraint validation
          implementation</entry>
        </row>

        <row>
          <entry>Composing constraint</entry>

          <entry>Constraint declared on another constraint definition. When
          the main constraint is validated, the composing constraints are
          validated too.</entry>
        </row>

        <row>
          <entry>javax.validation.Validator</entry>

          <entry>Main API. Holds contracts to validate object graphs</entry>
        </row>

        <row>
          <entry>javax.validation.ConstraintViolation</entry>

          <entry>Interface describing a given constraint failure on a given
          bean</entry>
        </row>

        <row>
          <entry>Getter</entry>

          <entry><para>Method whose:</para><itemizedlist>
              <listitem>
                <para>name starts with <literal>get</literal> and has a return
                type but no parameter</para>
              </listitem>

              <listitem>
                <para>name starts with <literal>is</literal>, has no parameter
                and is returning <classname>Boolean</classname></para>
              </listitem>
            </itemizedlist></entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <para/>
</appendix>
