// Bean Validation
//
// License: Apache License, Version 2.0
// See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.

[[valueextractordefinition]]
== Value extractor definition

Validation of container element constraints as well as cascaded validation of generic container types requires access to the values stored in the container.
The retrieval of values stored in a container is handled via implementations of the `ValueExtractor` interface:

[source, JAVA, indent=0]
----
include::{validation-api-source-dir}javax/validation/valueextraction/ValueExtractor.java[lines=7..8;15..-1]
----

The validation engine passes the container instance and a value receiver object to the `extractValues()` method.
Value extractor implementations must invoke one of the `ValueReceiver` methods for each element contained in the container, passing the element value and, optionally, a node name.
When calling

* `value()`, the given value will be passed to the validation engine;
* `iterableValue()`, the given value will be passed to the validation engine and the corresponding property path node (see <<validationapi-constraintviolation>>) will be marked as iterable, i.e. `Node#isInIterable()` returns `true`;
* `indexedValue()`, the given value will be passed to the validation engine and the corresponding property path node will be marked as iterable and it will have set the given index, i.e. `Node#getIndex()` returns the given index value;
* `keyedValue()`, the given value will be passed to the validation engine and the corresponding property path node will be marked as iterable and it will have set the given key, i.e. `Node#getKey()` returns the given key value.

When passing a non-null node name to any of the receiver methods and when the extractor is called in the course of container element validation (not during cascaded validation),
a node of kind `CONTAINER_ELEMENT` will be appended to the property path, with `Node#getName()` returning the specified name.
If null is passed as node name, no node will be appended to the property path.
The resulting property path will then be the same as if the constraint had been given on the container instead of a container element.
That is desirable for pure wrapper types such as `Optional`, `OptionalInt` etc.

The container value passed to a value extractor is retrieved from the element that hosts the type argument carrying the constraint or `@Valid` annotation:

[source,java]
----
private Map<String, @Valid @RetailOrder Order> ordersByName;

public Map<@NotNull String, Order> getOrdersByName() {
    return ordersByName;
}
----

When validating the `@NotNull` constraint, the map as returned by the getter will be passed to the map key extractor in order to obtain the map keys.
When validating the `@RetailOrder` constraint and performing cascaded validation,
the map as obtained directly from the field will be passed to the map value extractor in order to obtain the map values.

[[valueextractordefinition-extractedvalue]]
=== @ExtractedValue

The `@ExtractedValue` annotation is used to denote the element extracted by a given value extractor:

[source, JAVA, indent=0]
----
include::{validation-api-source-dir}javax/validation/valueextraction/ExtractedValue.java[lines=7..8;15..-1]
----

The `@ExtractedValue` annotation must be specified exactly once for a value extractor type.

For generic container types (e.g. `java.util.List`), `@ExtractedValue` is to be specified on a type argument of the container type as used in the extractor definition.
Only wildcard type arguments are supported as target for `@ExtractedValue` in this case.

[NOTE]
====
This implies that only one extractor is supported for a given generic type.
I.e. there can be an extractor for `List<?>`, but not one for `List<String>` and one for `List<Integer>`.
====

For non-generic container types (e.g. `java.util.OptionalInt`), `@ExtractedValue` is to be specified on the container type as used in the extractor definition.
The type of the wrapped element(s) must be specified using `@ExtractedValue#type()` in this case.

In case an illegal value extractor definition is detected, a `ValueExtractorDefinitionException` is raised.

[[valueextractordefinition-unwrapbydefault]]
=== @UnwrapByDefault

Value extractor definitions can be marked with the `@UnwrapByDefault` annotation.
This causes constraints to be automatically applied to the wrapped value if a constraint is found for an element handled by that extractor (see <<constraintdeclarationvalidationprocess-containerelementconstraints-implicitunwrapping>>):

.`@UnwrapByDefault` annotation
====
[source, JAVA, indent=0]
----
include::{validation-api-source-dir}javax/validation/valueextraction/UnwrapByDefault.java[lines=7..8;16..-1]
----
====

[source,java]
----
@UnwrapByDefault
class WrapperExtractor implements ValueExtractor<Wrapper<@ExtractedValue ?>> {

	@Override
	public void extractValues(Wrapper originalValue, ValueReceiver receiver) {
		// ...
	}
}
----

[[valueextractordefinition-builtinvalueextractors]]
=== Built-in value extractors

Compatible implementations provide value extractors for the following types out of the box:

* `java.util.Iterable`; `iterableValue()` must be invoked for each contained element, passing the string literal `<iterable element>` as node name
* `java.util.List`; `indexedValue()` must be invoked for each contained element, passing the string literal `<list element>` as node name
* `java.util.Map`; both map keys and map values are to be supported;
`keyedValue()` must be invoked by the map key extractor for each contained key, passing the string literal `<map key>` as node name;
`keyedValue()` must be invoked by the map value extractor for each contained value, passing the string literal `<map value>` as node name
* `java.util.Optional`; `value()` must be invoked if a value is present, passing `null` as node name
* `java.util.OptionalInt`, `java.util.OptionalLong` and `java.util.OptionalDouble`; `value()` must be invoked if a value is present, passing `null` as node name; the extractor must be marked with `@UnwrapByDefault`
* `javafx.beans.observable.ObservableValue`; `value()` must be invoked with the observable value, passing `null` as node name; the extractor must be marked with `@UnwrapByDefault`
* `javafx.beans.property.ReadOnlyListProperty` and `javafx.beans.property.ListProperty`; `indexedValue()` must be invoked for each contained element, passing the string literal `<list element>` as node name
* `javafx.beans.property.ReadOnlySetProperty` and `javafx.beans.property.SetProperty`; `iterableValue()` must be invoked for each contained element, passing the string literal `<iterable element>` as node name
* `javafx.beans.property.ReadOnlyMapProperty` and `javafx.beans.property.MapProperty`; both map keys and map values are to be supported;
`keyedValue()` must be invoked by the map key extractor for each contained key, passing the string literal `<map key>` as node name;
`keyedValue()` must be invoked by the map value extractor for each contained value, passing the string literal `<map value>` as node name

Additional value extractors (amending or overriding the set of built-in extractors) can be registered when bootstrapping the validation engine (see <<constraintdeclarationvalidationprocess-validationroutine-valueextractorresolution-registering>>).

[[valueextractordefinition-examples]]
=== Examples

A value extractor for the elements of `java.util.List`:

[source,java]
----
class ListValueExtractor implements ValueExtractor<List<@ExtractedValue ?>> {

	@Override
	public void extractValues(List<?> originalValue, ValueReceiver receiver) {
		for ( int i = 0; i < originalValue.size(); i++ ) {
			receiver.indexedValue( "<list element>", i, originalValue.get( i ) );
		}
	}
}
----

A value extractor for `java.util.Optional`:

[source,java]
----
public class OptionalValueExtractor implements ValueExtractor<Optional<@ExtractedValue ?>> {

	@Override
	public void extractValues(Optional<?> originalValue, ValueExtractor.ValueReceiver receiver) {
		receiver.value( null, originalValue.orElse( null ) );
	}
}
----

A value extractor for `java.util.OptionalInt`:

[source,java]
----
@UnwrapByDefault
public class OptionalIntValueExtractor implements ValueExtractor<@ExtractedValue(type = Integer.class) OptionalInt> {

	@Override
	public void extractValues(OptionalInt originalValue, ValueReceiver receiver) {
		receiver.value( null, originalValue.isPresent() ? originalValue.getAsInt() : null );
	}
}
----

The following extractor definition is illegal as it specifies `@ExtractedValue` more than once:

[source,java]
----
public class IllegalMapExtractor implements ValueExtractor<Map<@ExtractedValue ?, @ExtractedValue ?>> { ... }
----

The following extractor definition is unsupported as it specifies `@ExtractedValue` on a non-wildcard type argument:

[source,java]
----
public class StringListValueExtractor implements ValueExtractor<List<@ExtractedValue String>> { ... }
----
