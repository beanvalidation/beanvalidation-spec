// Bean Validation
//
// License: Apache License, Version 2.0
// See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.

[[whatsnew]]

== What's new

=== What's new in 2.0

The main contribution of Bean Validation 2.0 is leveraging the new language features and API additions of Java 8 for the purposes of validation.
The changes include:

* Support for the new date/time data types for `@Past` and `@Future` (see <<builtinconstraints>>);
fine-grained control over the current time and time zone used for validation (see <<constraintsdefinitionimplementation-validationimplementation-temporal-validators>>)
* Advanced support for validating container elements by annotating type arguments of generic type, e.g. `List<@Min(1) Integer> positiveNumbers` (see <<appendix-value-extraction>>);
this also includes:
** More flexible cascaded validation of collection types, e.g. `Map<@Valid CustomerType, @Valid Customer> customersByType`
** Support for `java.util.Optional`
** Support for the property types declared by JavaFX
* All built-in constraints are marked as repeatable (see <<builtinconstraints>>)
* Parameter names are retrieved using reflection (see <<constraintdeclarationvalidationprocess-methodlevelconstraints-definingparameterconstraints-namingparameters>>)
* `ConstraintValidator#initialize()` is a default method (see <<constraintsdefinitionimplementation-validationimplementation>>)

Further changes will be incorporated in the course of future Early Draft(s) and/or Public Draft(s) of Bean Validation 2.0.

=== What's new in 1.1

Bean Validation 1.1 improves and builds upon Bean Validation 1.0. The expert group and the community have been working on a few specific areas.

==== Openness

All of Bean Validation 1.1 work has been done in the open and in an open source way. Source code for the API, reference implementation, test compatibility kit as well as the specification and the website sources are available in the open. All discussions are done in the open in the publicly available development mailing list. Road map and proposals are also published on the website.

You can find all the details (mailing lists, source repositories etc.) at http://beanvalidation.org.

==== Dependency injection

Bean Validation uses a few components [classname]`MessageInterpolator`, [classname]`TraversableResolver`, [classname]`ParameterNameProvider`, [classname]`ConstraintValidatorFactory` and [classname]`ConstraintValidator`. Bean Validation 1.1 standardizes how these objects are managed by a container and how these objects can benefit from container services. In particular, CDI support within Java EE is being defined.

==== Method validation

Bean Validation 1.1 allows to put constraints to the parameters and return values of arbitrary methods and constructors. That way the Bean Validation API can be used to describe and validate the contract applying to a given method or constructor, that is:

* the preconditions that must be met by the caller before the method or constructor may be invoked and
* the postconditions that are guaranteed to the caller after a method or constructor invocation returns.


This enables a programming style known as "Programming by Contract" (PbC). Compared to traditional means of checking the sanity of argument and return values this approach has several advantages:

* These checks are expressed declaratively and don't have to be performed manually, which results in less code to write, read and maintain.
* The pre- and postconditions applying for a method or constructor don't have to be expressed again in the documentation, since any of its annotations will automatically be included in the generated JavaDoc. This reduces redundancies, thus avoiding efforts and inconsistencies between implementation and documentation.


==== Integration with Context and Dependency Injection

The integration points with Context and Dependency Injection (CDI) have been increased and reworked. This opens up for a more natural and standard integration both in Java EE and Java SE and encompass dependency injection, component lifecycle management and interception for method validation.

==== Group conversion

The specification offers a way to alter the targeted group when validation cascading in happening. This feature is particularly useful to reuse a given object (graph) and to avoid leaking groups between various object subgraphs. It also makes for more readable constraints.

==== Message interpolation via the unified expression language

Constraint violation messages can now use EL expressions for a much more flexible rendering and string formatting. In particular a formatter object is injected in the EL context to convert numbers, dates etc. into the locale specific string representation. Likewise, the validated value is also available in the EL context.

==== Others

Many more minor changes have been done. Check out the change log for more details at <<changelog>>.
